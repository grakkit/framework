module.exports=function(){const framework={array:object=>{const output=[];if("number"==typeof object.length){if(object.length>0){let index=0;for(;output.length<object.length;)output.push(object[index++])}}else"function"==typeof object.forEach?object.forEach(entry=>{output.push(entry)}):"function"==typeof object.forEachRemaining&&object.forEachRemaining(entry=>{output.push(entry)});return output},base:{characters:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:string=>{let index=0,result="";for(;index<string.length;){let a=string.charCodeAt(index++)||0,b=string.charCodeAt(index++)||0,c=string.charCodeAt(index++)||0,d=(15&b)<<2|c>>6&3,e=63&c;b?c||(e=64):d=e=64,result+=framework.base.characters.charAt(a>>2&63),result+=framework.base.characters.charAt((3&a)<<4|b>>4&15),result+=framework.base.characters.charAt(d),result+=framework.base.characters.charAt(e)}return result},decode:string=>{let index=0,result="";for(;index<string.length;){let a=framework.base.characters.indexOf(string.charAt(index++)),b=framework.base.characters.indexOf(string.charAt(index++)),c=framework.base.characters.indexOf(string.charAt(index++)),d,e=(15&b)<<4|c>>2&15,f=(3&c)<<6|63&framework.base.characters.indexOf(string.charAt(index++));result+=String.fromCharCode((63&a)<<2|b>>4&3),result+=e?String.fromCharCode(e):"",result+=f?String.fromCharCode(f):""}return result}},camel:(string,separator)=>{const pascal=framework.pascal(string,separator);return framework.lower(pascal[0])+pascal.slice(1)},clamp:(number,min,max)=>number<min?min:number>max?max:number,collect:(...array)=>{const output=new java.util.ArrayList;return array.forEach(entry=>{output.add(entry)}),output},define:(object,consumer)=>{consumer||(consumer=entry=>({get:()=>entry.value,set:value=>{entry.value=value}}));const output={};return framework.entries(object).forEach(entry=>{const info=consumer(entry);info&&Object.defineProperty(output,entry.key,{get(){if(info.get)return info.get()},set(value){info.set&&info.set(value)}})}),output},entries:object=>framework.keys(object).map(key=>({key:key,value:object[key]})),extend:(object,...objects)=>Object.assign(object,...objects),flat:array=>array.filter(entry=>entry),key:(object,value)=>framework.keys(object)[framework.values(object).indexOf(value)],keys:object=>core.keys(object),lower:string=>string.toLowerCase(),match:(object,filter)=>{switch(typeof filter){case"undefined":return!0;case"function":return filter(object);case"object":switch(framework.type(filter)){case"Array":return filter.map(entry=>framework.match(object,entry)).includes(!0);case"Object":return!framework.keys(filter).map(key=>framework.match(object[key],filter[key])).includes(!1);default:return object===filter}default:return object===filter}},mirror:options=>{options||(options={});const mirror=framework.extend(options.array||[],{add:options.add||(()=>{}),remove:options.remove||(()=>{}),clear:options.clear||(()=>{})});return{get:()=>mirror,set:value=>{mirror.clear(),value.forEach(mirror.add)}}},object:(array,consumer)=>(consumer||(consumer=(entry,index)=>({[entry.key||index]:entry.value||entry})),framework.extend({},...framework.flat(framework.array(array).map(consumer)))),pascal:(string,separator)=>string.split(separator).map(chunk=>framework.upper(chunk[0])+framework.lower(chunk.slice(1))).join(""),simplify:(...context)=>{let output=null;const object=context[0];switch(framework.type(object)){case"Array":output=[];for(let entry of object)context.includes(entry)||output.push(framework.simplify(entry,...context));output=framework.flat(output),output.length||(output=null);break;case"Object":output={};for(let key of framework.keys(object))context.includes(object[key])||(output[key]=framework.simplify(object[key],...context));output=framework.strain(output),framework.keys(output).length||(output=null);break;default:output=object}return output},splice:(string,separator,...index)=>string.split(separator).slice(...index).join(separator),strain:(object,consumer)=>(consumer||(consumer=entry=>entry.value),framework.object(framework.entries(object).filter(consumer))),type:object=>{const type=toString.apply(object).split(" ")[1].slice(0,-1);return"Object"===type?object.constructor.name:type},upper:string=>string.toUpperCase(),uuid:string=>string?java.util.UUID.fromString(string):java.util.UUID.randomUUID(),values:object=>core.values(object)};return framework}();